-- Enter migration here

DROP TABLE IF EXISTS message_app_users cascade;
CREATE TABLE message_app_users(
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR NOT NULL,
  fcmToken VARCHAR
);
GRANT ALL ON message_app_users TO PUBLIC;

DROP TABLE IF EXISTS messages cascade;

CREATE TABLE messages(
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  content VARCHAR NOT NULL,
  senderid INTEGER REFERENCES "message_app_users"(id) ON DELETE CASCADE,
  recieverid INTEGER REFERENCES "message_app_users"(id) ON DELETE CASCADE
);
GRANT ALL ON messages TO PUBLIC;

CREATE INDEX IF NOT EXISTS messages_senderid_idx ON "messages"(senderid);
CREATE INDEX IF NOT EXISTS messages_reciever_idx ON "messages"(recieverid);
CREATE INDEX IF NOT EXISTS message_app_users_name_idx ON "message_app_users"(name);

INSERT INTO "message_app_users"(name) VALUES ('Fraser');
INSERT INTO "message_app_users"(name) VALUES ('Eerik');


CREATE OR REPLACE FUNCTION messages_table_trigger() RETURNS trigger AS $$
DECLARE
  BEGIN
    PERFORM pg_notify( CAST('message_notification' AS text), row_to_json(NEW)::text);
    RETURN new;
  END
$$ LANGUAGE plpgsql;

CREATE TRIGGER messages_table_update_trigger AFTER INSERT ON messages
FOR EACH ROW EXECUTE PROCEDURE messages_table_trigger();


